$date
	Tue Nov  7 20:47:05 2017
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module test $end
$var reg 1 ! clk $end
$scope module CPU $end
$var wire 8 " address [7:0] $end
$var wire 2 # addrsel [1:0] $end
$var wire 2 $ aluop [1:0] $end
$var wire 8 % aluout [7:0] $end
$var wire 1 & clk $end
$var wire 8 ' datain [7:0] $end
$var wire 8 ( dbus [7:0] $end
$var wire 2 ) dregsel [1:0] $end
$var wire 8 * dval [7:0] $end
$var wire 1 + dwrite $end
$var wire 1 , imload $end
$var wire 8 - imm [7:0] $end
$var wire 1 . irload $end
$var wire 8 / irvalue [7:0] $end
$var wire 1 0 negative $end
$var wire 8 1 pcin [7:0] $end
$var wire 1 2 pcload $end
$var wire 1 3 pcsel $end
$var wire 1 4 readwrite $end
$var wire 2 5 regsel [1:0] $end
$var wire 8 6 sbus [7:0] $end
$var wire 2 7 sregsel [1:0] $end
$var wire 1 8 zero $end
$scope module RAM $end
$var wire 8 9 addr [7:0] $end
$var wire 1 & clk $end
$var wire 8 : data [7:0] $end
$var wire 1 4 we $end
$var reg 8 ; q [7:0] $end
$upscope $end
$scope module InstrREG $end
$var wire 1 & clk $end
$var wire 8 < data_in [7:0] $end
$var wire 1 . enable $end
$var reg 8 = data_out [7:0] $end
$upscope $end
$scope module CTRL $end
$var wire 2 > addrsel [1:0] $end
$var wire 1 & clk $end
$var wire 1 + dwrite $end
$var wire 1 , imload $end
$var wire 1 . irload $end
$var wire 8 ? irvalue [7:0] $end
$var wire 1 0 negative $end
$var wire 1 2 pcload $end
$var wire 1 3 pcsel $end
$var wire 2 @ phase [1:0] $end
$var wire 1 4 readwrite $end
$var wire 2 A regsel [1:0] $end
$var wire 1 8 zero $end
$var reg 2 B aluop [1:0] $end
$var reg 2 C dregsel [1:0] $end
$var reg 1 D irbit4 $end
$var reg 1 E irbit5 $end
$var reg 1 F irbit6 $end
$var reg 1 G irbit7 $end
$var reg 2 H op1 [1:0] $end
$var reg 4 I op1op2 [3:0] $end
$var reg 2 J op2 [1:0] $end
$var reg 2 K rd [1:0] $end
$var reg 2 L rs [1:0] $end
$var reg 2 M sregsel [1:0] $end
$scope module PHASE $end
$var wire 1 & clk $end
$var reg 2 N phase [1:0] $end
$upscope $end
$scope module IR $end
$var wire 2 O phase [1:0] $end
$var reg 1 P irload $end
$upscope $end
$scope module IM $end
$var wire 1 Q irbit7 $end
$var wire 2 R phase [1:0] $end
$var reg 1 S imload $end
$upscope $end
$scope module PC $end
$var wire 2 T phase [1:0] $end
$var reg 1 U pcsel $end
$upscope $end
$scope module PCLOAD $end
$var wire 1 V irbit4 $end
$var wire 1 W irbit5 $end
$var wire 1 X irbit6 $end
$var wire 1 Q irbit7 $end
$var wire 1 0 negative $end
$var wire 2 Y op2 [1:0] $end
$var wire 2 Z phase [1:0] $end
$var wire 1 8 zero $end
$var reg 1 [ mux1out $end
$var reg 1 \ pcload $end
$upscope $end
$scope module RW $end
$var wire 1 V irbit4 $end
$var wire 1 W irbit5 $end
$var wire 1 X irbit6 $end
$var wire 1 ] irbit7 $end
$var wire 2 ^ phase [1:0] $end
$var reg 1 _ readwrite $end
$upscope $end
$scope module REGSEL $end
$var wire 4 ` op1op2 [3:0] $end
$var wire 2 a phase [1:0] $end
$var reg 2 b mux1out [1:0] $end
$var reg 2 c regsel [1:0] $end
$upscope $end
$scope module DR $end
$var wire 1 & clk $end
$var wire 4 d op1op2 [3:0] $end
$var wire 2 e phase [1:0] $end
$var reg 1 f dwrite $end
$var reg 2 g mux1out [1:0] $end
$upscope $end
$scope module AS $end
$var wire 4 h op1op2 [3:0] $end
$var wire 2 i phase [1:0] $end
$var reg 2 j addrsel [1:0] $end
$var reg 2 k mux1out [1:0] $end
$upscope $end
$upscope $end
$scope module ImmREG $end
$var wire 1 & clk $end
$var wire 8 l data_in [7:0] $end
$var wire 1 , enable $end
$var reg 8 m data_out [7:0] $end
$upscope $end
$scope module resMux $end
$var wire 8 n I0 [7:0] $end
$var wire 8 o I1 [7:0] $end
$var wire 8 p I2 [7:0] $end
$var wire 8 q I3 [7:0] $end
$var wire 2 r sel [1:0] $end
$var reg 8 s out [7:0] $end
$upscope $end
$scope module RF $end
$var wire 1 & clk $end
$var wire 8 t dbus [7:0] $end
$var wire 2 u dregsel [1:0] $end
$var wire 8 v dval [7:0] $end
$var wire 1 + dwrite $end
$var wire 8 w res0 [7:0] $end
$var wire 8 x res1 [7:0] $end
$var wire 8 y res2 [7:0] $end
$var wire 8 z res3 [7:0] $end
$var wire 4 { res_enable [3:0] $end
$var wire 8 | sbus [7:0] $end
$var wire 2 } sregsel [1:0] $end
$var reg 1 ~ negative $end
$var reg 1 !" zero $end
$scope module demux1 $end
$var wire 1 + I0 $end
$var wire 2 "" sel [1:0] $end
$var reg 1 #" o0 $end
$var reg 1 $" o1 $end
$var reg 1 %" o2 $end
$var reg 1 &" o3 $end
$upscope $end
$scope module r0 $end
$var wire 1 & clk $end
$var wire 8 '" data_in [7:0] $end
$var wire 1 (" enable $end
$var reg 8 )" data_out [7:0] $end
$upscope $end
$scope module r1 $end
$var wire 1 & clk $end
$var wire 8 *" data_in [7:0] $end
$var wire 1 +" enable $end
$var reg 8 ," data_out [7:0] $end
$upscope $end
$scope module r2 $end
$var wire 1 & clk $end
$var wire 8 -" data_in [7:0] $end
$var wire 1 ." enable $end
$var reg 8 /" data_out [7:0] $end
$upscope $end
$scope module r3 $end
$var wire 1 & clk $end
$var wire 8 0" data_in [7:0] $end
$var wire 1 1" enable $end
$var reg 8 2" data_out [7:0] $end
$upscope $end
$scope module mux1 $end
$var wire 8 3" I0 [7:0] $end
$var wire 8 4" I1 [7:0] $end
$var wire 8 5" I2 [7:0] $end
$var wire 8 6" I3 [7:0] $end
$var wire 2 7" sel [1:0] $end
$var reg 8 8" out [7:0] $end
$upscope $end
$scope module mux2 $end
$var wire 8 9" I0 [7:0] $end
$var wire 8 :" I1 [7:0] $end
$var wire 8 ;" I2 [7:0] $end
$var wire 8 <" I3 [7:0] $end
$var wire 2 =" sel [1:0] $end
$var reg 8 >" out [7:0] $end
$upscope $end
$upscope $end
$scope module ALU $end
$var wire 8 ?" in_A [7:0] $end
$var wire 8 @" in_B [7:0] $end
$var wire 2 A" in_operation [1:0] $end
$var wire 8 B" mux1 [7:0] $end
$var wire 8 C" out_adder [7:0] $end
$var wire 8 D" out_and [7:0] $end
$var wire 8 E" out_c [7:0] $end
$var wire 8 F" out_or [7:0] $end
$scope module i1 $end
$var wire 8 G" A [7:0] $end
$var wire 8 H" B [7:0] $end
$var reg 8 I" aANDb [7:0] $end
$upscope $end
$scope module i2 $end
$var wire 8 J" A [7:0] $end
$var wire 8 K" B [7:0] $end
$var reg 8 L" aORb [7:0] $end
$upscope $end
$scope module i3 $end
$var wire 8 M" A [7:0] $end
$var wire 8 N" B [7:0] $end
$var wire 1 O" carry_in $end
$var reg 8 P" BB [7:0] $end
$var reg 8 Q" aPlusb [7:0] $end
$upscope $end
$scope module i4 $end
$var wire 8 R" I0 [7:0] $end
$var wire 8 S" I1 [7:0] $end
$var wire 1 T" sel $end
$var reg 8 U" O [7:0] $end
$upscope $end
$scope module i5 $end
$var wire 8 V" I0 [7:0] $end
$var wire 8 W" I1 [7:0] $end
$var wire 1 X" sel $end
$var reg 8 Y" O [7:0] $end
$upscope $end
$upscope $end
$scope module PC $end
$var wire 8 Z" address [7:0] $end
$var wire 2 [" addrsel [1:0] $end
$var wire 1 & clk $end
$var wire 8 \" dbus [7:0] $end
$var wire 8 ]" imm [7:0] $end
$var wire 8 ^" pcin [7:0] $end
$var wire 1 2 pcload $end
$var wire 8 _" pcout [7:0] $end
$var wire 1 3 pcsel $end
$var wire 8 `" sbus [7:0] $end
$var reg 8 a" pcadd [7:0] $end
$scope module pcInMux $end
$var wire 8 b" I0 [7:0] $end
$var wire 8 c" I1 [7:0] $end
$var wire 1 3 sel $end
$var reg 8 d" O [7:0] $end
$upscope $end
$scope module PCREG $end
$var wire 1 & clk $end
$var wire 8 e" data_in [7:0] $end
$var wire 1 2 enable $end
$var reg 8 f" data_out [7:0] $end
$upscope $end
$scope module addressMux $end
$var wire 8 g" I0 [7:0] $end
$var wire 8 h" I1 [7:0] $end
$var wire 8 i" I2 [7:0] $end
$var wire 8 j" I3 [7:0] $end
$var wire 2 k" sel [1:0] $end
$var reg 8 l" out [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 l"
b0 k"
b0 j"
b0 i"
b0 h"
b0 g"
b0 f"
b1 e"
b1 d"
b1 c"
b0 b"
b1 a"
b0 `"
b0 _"
b1 ^"
b0 ]"
b0 \"
b0 ["
b0 Z"
b0 Y"
0X"
b0 W"
b0 V"
b0 U"
0T"
b0 S"
b0 R"
b0 Q"
b0 P"
0O"
b0 N"
b0 M"
b0 L"
b0 K"
b0 J"
b0 I"
b0 H"
b0 G"
b0 F"
b0 E"
b0 D"
b0 C"
b0 B"
b0 A"
b0 @"
b0 ?"
b0 >"
b0 ="
b0 <"
b0 ;"
b0 :"
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
01"
b0 0"
b0 /"
0."
b0 -"
b0 ,"
0+"
b0 *"
b0 )"
0("
b0 '"
0&"
0%"
0$"
0#"
b0 ""
0!"
0~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
b11 g
0f
b0 e
b0 d
b0 c
b11 b
b0 a
b0 `
0_
b0 ^
z]
1\
0[
b0 Z
b0 Y
0X
0W
0V
1U
b0 T
0S
b0 R
0Q
0P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
0G
0F
0E
0D
b0 C
b0 B
b0 A
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
08
b0 7
b0 6
b0 5
04
13
12
b1 1
00
b0 /
0.
b0 -
0,
0+
b0 *
b0 )
b0 (
b0 '
0&
b0 %
b0 $
b0 #
b0 "
0!
$end
#50
1X"
b0 b
b1 k
1[
b10 B
b10 $
b10 A"
b1110 I
b1110 `
b1110 d
b1110 h
b10 J
b10 Y
b11 H
1E
1W
1F
1X
1G
1Q
b11100000 =
b11100000 /
b11100000 ?
b11 d"
b11 1
b11 ^"
b11 e"
b11 a"
b11 c"
1P
1.
1\
12
b10 l"
b10 "
b10 9
b10 Z"
b10 f"
b10 _"
b10 g"
b11100000 ;
b11100000 '
b11100000 <
b11100000 l
b11100000 p
b1 N
b1 @
b1 O
b1 R
b1 T
b1 Z
b1 ^
b1 a
b1 e
b1 i
1!
1&
#100
0!
0&
#150
b1000 Y"
b1000 %
b1000 :
b1000 q
b1000 E"
b100 U"
b100 B"
b100 V"
b1000 Q"
b1000 C"
b1000 W"
b100 P"
b100 I"
b100 D"
b100 R"
b100 L"
b100 F"
b100 S"
b100 >"
b100 6
b100 o
b100 |
b100 @"
b100 H"
b100 K"
b100 N"
b100 `"
b100 i"
b100 8"
b100 (
b100 t
b100 ?"
b100 G"
b100 J"
b100 M"
b100 \"
b100 j"
b100 )"
b100 w
b100 3"
b100 9"
b100 d"
b100 1
b100 ^"
b100 e"
b100 s
b100 *
b100 v
b100 '"
b100 *"
b100 -"
b100 0"
1("
b100 m
b100 -
b100 n
b100 ]"
b100 b"
b100 h"
1#"
b1 {
b100 a"
b100 c"
0P
0.
0\
02
b11 l"
b11 "
b11 9
b11 Z"
1f
1+
1S
1,
b11 f"
b11 _"
b11 g"
b10 N
b10 @
b10 O
b10 R
b10 T
b10 Z
b10 ^
b10 a
b10 e
b10 i
b100 ;
b100 '
b100 <
b100 l
b100 p
1!
1&
#200
0!
0&
#250
b101 d"
b101 1
b101 ^"
b101 e"
b101 a"
b101 c"
b100 l"
b100 "
b100 9
b100 Z"
b100 f"
b100 _"
b100 g"
0("
0#"
b0 {
1\
12
0S
0,
0[
0f
0+
b11100100 ;
b11100100 '
b11100100 <
b11100100 l
b11100100 p
b0 N
b0 @
b0 O
b0 R
b0 T
b0 Z
b0 ^
b0 a
b0 e
b0 i
1!"
18
1!
1&
#300
0!
0&
#350
b100 Y"
b100 %
b100 :
b100 q
b100 E"
b0 U"
b0 B"
b0 V"
b100 Q"
b100 C"
b100 W"
b0 I"
b0 D"
b0 R"
b0 8"
b0 (
b0 t
b0 ?"
b0 G"
b0 J"
b0 M"
b0 \"
b0 j"
b1 C
b1 )
b1 u
b1 ""
b1 7"
b1 K
b11100100 =
b11100100 /
b11100100 ?
b110 d"
b110 1
b110 ^"
b110 e"
b110 a"
b110 c"
1P
1.
b101 l"
b101 "
b101 9
b101 Z"
b101 f"
b101 _"
b101 g"
b1 N
b1 @
b1 O
b1 R
b1 T
b1 Z
b1 ^
b1 a
b1 e
b1 i
1!
1&
#400
0!
0&
#450
b110 Y"
b110 %
b110 :
b110 q
b110 E"
b110 Q"
b110 C"
b110 W"
b110 L"
b110 F"
b110 S"
b10 8"
b10 (
b10 t
b10 ?"
b10 G"
b10 J"
b10 M"
b10 \"
b10 j"
b10 ,"
b10 x
b10 4"
b10 :"
b111 d"
b111 1
b111 ^"
b111 e"
b10 s
b10 *
b10 v
b10 '"
b10 *"
b10 -"
b10 0"
1+"
b10 m
b10 -
b10 n
b10 ]"
b10 b"
b10 h"
1$"
b10 {
b111 a"
b111 c"
0P
0.
0\
02
1[
b110 l"
b110 "
b110 9
b110 Z"
1f
1+
1S
1,
b110 f"
b110 _"
b110 g"
b10 ;
b10 '
b10 <
b10 l
b10 p
b10 N
b10 @
b10 O
b10 R
b10 T
b10 Z
b10 ^
b10 a
b10 e
b10 i
0!"
08
1!
1&
#500
0!
0&
#550
b1000 d"
b1000 1
b1000 ^"
b1000 e"
b1000 a"
b1000 c"
b111 l"
b111 "
b111 9
b111 Z"
b111 f"
b111 _"
b111 g"
0+"
0$"
b0 {
0[
1\
12
0S
0,
0f
0+
1!"
18
b0 N
b0 @
b0 O
b0 R
b0 T
b0 Z
b0 ^
b0 a
b0 e
b0 i
1!
1&
#600
0!
0&
#650
b0 k
b11 b
0\
02
b10 I
b10 `
b10 d
b10 h
b0 H
0F
0X
0G
0Q
b100100 =
b100100 /
b100100 ?
b1001 d"
b1001 1
b1001 ^"
b1001 e"
b1001 a"
b1001 c"
1P
1.
b1000 l"
b1000 "
b1000 9
b1000 Z"
b1000 f"
b1000 _"
b1000 g"
b100100 ;
b100100 '
b100100 <
b100100 l
b100100 p
b1 N
b1 @
b1 O
b1 R
b1 T
b1 Z
b1 ^
b1 a
b1 e
b1 i
1!
1&
#700
0!
0&
#750
b1010 Y"
b1010 %
b1010 :
b1010 q
b1010 E"
b100 U"
b100 B"
b100 V"
b1010 Q"
b1010 C"
b1010 W"
b100 I"
b100 D"
b100 R"
b110 8"
b110 (
b110 t
b110 ?"
b110 G"
b110 J"
b110 M"
b110 \"
b110 j"
b110 ,"
b110 x
b110 4"
b110 :"
1+"
b1010 s
b1010 *
b1010 v
b1010 '"
b1010 *"
b1010 -"
b1010 0"
1$"
b10 {
b11 c
b11 5
b11 A
b11 r
0P
0.
1f
1+
b10 N
b10 @
b10 O
b10 R
b10 T
b10 Z
b10 ^
b10 a
b10 e
b10 i
b0 ;
b0 '
b0 <
b0 l
b0 p
1!
1&
#800
0!
0&
#850
b1010 d"
b1010 1
b1010 ^"
b1010 e"
b1010 a"
b1010 c"
b1001 l"
b1001 "
b1001 9
b1001 Z"
b1001 f"
b1001 _"
b1001 g"
b1110 Y"
b1110 %
b1110 :
b1110 q
b1110 E"
b0 U"
b0 B"
b0 V"
0+"
b10 s
b10 *
b10 v
b10 '"
b10 *"
b10 -"
b10 0"
b1110 Q"
b1110 C"
b1110 W"
b0 I"
b0 D"
b0 R"
b1110 L"
b1110 F"
b1110 S"
0$"
b0 {
b0 c
b0 5
b0 A
b0 r
1\
12
b1010 8"
b1010 (
b1010 t
b1010 ?"
b1010 G"
b1010 J"
b1010 M"
b1010 \"
b1010 j"
0f
0+
b1010 ,"
b1010 x
b1010 4"
b1010 :"
b0 N
b0 @
b0 O
b0 R
b0 T
b0 Z
b0 ^
b0 a
b0 e
b0 i
1!
1&
#900
0!
0&
#950
b1110 U"
b1110 B"
b1110 V"
xO"
xT"
xX"
b0 b
b0 g
bx B
bx $
bx A"
bx M
bx 7
bx }
bx ="
bx C
bx )
bx u
bx ""
bx 7"
bx I
bx `
bx d
bx h
bx L
bx K
bx J
bx Y
bx H
xD
xV
xE
xW
xF
xX
xG
xQ
bx =
bx /
bx ?
b1100 d"
b1100 1
b1100 ^"
b1100 e"
b1100 a"
b1100 c"
1P
1.
x\
x2
b1011 l"
b1011 "
b1011 9
b1011 Z"
b1011 f"
b1011 _"
b1011 g"
b1 N
b1 @
b1 O
b1 R
b1 T
b1 Z
b1 ^
b1 a
b1 e
b1 i
bx ;
bx '
bx <
bx l
bx p
1!
1&
#1000
0!
0&
